# src/graph/nodes/reasoner.py
from __future__ import annotations
from typing import Any, Dict, Optional
import logging
from src.model.agent_result import AgentResult
from src.model.context.base import (
    append_history_event,
    get_current_step_id,
    get_subquestion_text,
)
from src.model.context.context import GraphContext
from src.utils.utils import build_tool_registry_snapshot

LOG = logging.getLogger(__name__)


def reasoner_node(state: Dict[str, Any], agent_registry=None) -> Dict[str, Any]:
    if agent_registry is None:
        raise ValueError("reasoner_node: agent_registry is required")

    ctx = state if isinstance(state, GraphContext) else GraphContext.from_state_dict(state)

    step_id = get_current_step_id(ctx)
    if not step_id:
        LOG.warning("‚ö†Ô∏è reasoner_node: –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞")
        append_history_event(ctx, {"type": "reasoner_no_step"})
        return ctx.to_dict()

    # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ô –ú–ï–¢–û–î ensure_execution_step
    step = ctx.ensure_execution_step(step_id)

    try:
        subquestion_text = get_subquestion_text(ctx, step_id)
    except Exception as e:
        LOG.error("‚ùå reasoner_node: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –ø–æ–¥–≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —à–∞–≥–∞ %s: %s", step_id, e)
        return ctx.to_dict()

    # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥—Ä—É–≥–∏—Ö —à–∞–≥–æ–≤
    step_outputs = ctx.get_all_step_results_for_reasoner()

    # –°–æ–±–∏—Ä–∞–µ–º snapshot –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    tool_registry_snapshot = build_tool_registry_snapshot(agent_registry)

    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —à–∞–≥–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
    step_state = ctx.get_step_state_for_reasoner(step_id)

    params = {
        "subquestion": {"id": step_id, "text": subquestion_text},
        "step_state": step_state,
        "step_outputs": step_outputs,
        "tool_registry_snapshot": tool_registry_snapshot,
    }

    LOG.info("üß† reasoner_node: –≤—ã–∑–æ–≤ ReasonerAgent –¥–ª—è —à–∞–≥–∞ %s", step_id)
    append_history_event(ctx, {"type": "reasoner_call", "step_id": step_id})

    try:
        reasoner_agent = agent_registry.instantiate_agent("ReasonerAgent", control=True)
        agent_result = reasoner_agent.execute_operation("decide_next_stage", params=params, context={})
    except Exception as e:
        LOG.exception("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ ReasonerAgent: %s", e)
        return ctx.to_dict()

    if not isinstance(agent_result, AgentResult) or agent_result.status != "ok":
        LOG.error("‚ùå ReasonerAgent –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: %s", agent_result.error or agent_result.content)
        return ctx.to_dict()

    decision = agent_result.output
    next_stage = decision.get("next_stage")
    reason = decision.get("reason", "")
    LOG.info("‚úÖ Reasoner –ø—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ: next_stage=%s, reason=%s", next_stage, reason)

    # ‚úÖ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
    ctx.record_reasoner_decision(step_id, decision)

    # === finalize ===
    if next_stage == "finalize":
        ctx.mark_step_completed(step_id)
        LOG.info("üèÅ –®–∞–≥ %s –∑–∞–≤–µ—Ä—à—ë–Ω", step_id)
        return ctx.to_dict()

    # –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —ç—Ç–∞–ø—ã ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º –≤ executor
    return ctx.to_dict()