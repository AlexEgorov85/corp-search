# src/graph/nodes/reasoner.py
"""
–£–∑–µ–ª Reasoner.
–¶–µ–ª—å: –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –æ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞.
–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:
  - –≤—Ö–æ–¥ –≤ —à–∞–≥
  - –≤—ã–∑–æ–≤ ReasonerAgent
  - –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
  - –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —ç—Ç–∞–ø (data_fetch, processing, validation)
  - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —à–∞–≥–∞
"""
from __future__ import annotations
import logging
from typing import Any, Dict
from src.model.agent_result import AgentResult
from src.model.context.context import GraphContext
from src.utils.utils import build_tool_registry_snapshot

LOG = logging.getLogger(__name__)


def reasoner_node(state: Dict[str, Any], agent_registry=None) -> Dict[str, Any]:
    if agent_registry is None:
        raise ValueError("reasoner_node: agent_registry is required")
    ctx = GraphContext.from_state_dict(state)
    step_id = ctx.get_current_step_id()
    if not step_id:
        LOG.warning("‚ö†Ô∏è reasoner_node: –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞")
        return ctx.to_dict()

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞ –ª–∏ –æ–Ω–∞? ===
    if ctx.is_stage_completed(step_id, "validation"):
        step = ctx.get_execution_step(step_id)
        validation_result = step.validation_result if step else None
        is_valid = (
            validation_result.get("is_valid", False)
            if isinstance(validation_result, dict)
            else False
        )
        retry_count = getattr(step, "retry_count", 0)

        if not is_valid and retry_count < 2:
            LOG.info("üîÅ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –¥–ª—è —à–∞–≥–∞ %s (–ø–æ–ø—ã—Ç–∫–∞ %d)", step_id, retry_count + 1)
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —ç—Ç–∞–ø—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º expected_stages
            step.retry_count += 1
            for stage in step.completed_stages:
                step.completed_stages[stage] = False
            step.raw_output = None
            step.validation_result = None
            step.error = None
            # Reasoner –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω —Å–Ω–æ–≤–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            return ctx.to_dict()
        elif not is_valid:
            LOG.error("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞ –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫, –∑–∞–≤–µ—Ä—à–∞–µ–º —à–∞–≥ %s", retry_count, step_id)
            ctx.mark_step_completed(step_id)
            return ctx.to_dict()

    # === –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞: –≤—ã–∑–æ–≤ ReasonerAgent ===
    if ctx.is_step_fully_completed(step_id):
        ctx.mark_step_completed(step_id)
        LOG.info("üèÅ –®–∞–≥ %s –∑–∞–≤–µ—Ä—à—ë–Ω", step_id)
        return ctx.to_dict()

    subquestion_text = ctx.get_subquestion_text(step_id)
    LOG.info("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ %s: '%s'", step_id, subquestion_text)

    step_outputs = ctx.get_relevant_step_outputs_for_reasoner(step_id)
    tool_registry_snapshot = build_tool_registry_snapshot(agent_registry)

    params = {
        "subquestion": {"id": step_id, "text": subquestion_text},
        "step_state": {"stage": ctx.get_current_stage(step_id)},
        "step_outputs": step_outputs,
        "tool_registry_snapshot": tool_registry_snapshot,
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ—à–µ–Ω–∏–µ –∏ –Ω–µ—Ç –æ—à–∏–±–∫–∏ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    step = ctx.get_execution_step(step_id)
    existing_decision = step.decision if step else None
    has_error = step.error is not None if step else False

    if existing_decision and not has_error:
        LOG.info("üîÑ reasoner_node: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è —à–∞–≥–∞ %s", step_id)
        decision = existing_decision
    else:
        try:
            reasoner_agent = agent_registry.instantiate_agent("ReasonerAgent", control=True)
            result = reasoner_agent.execute_operation("decide_next_stage", params)
            if isinstance(result, AgentResult) and result.status == "ok":
                ctx.record_reasoner_decision(step_id, result.output)
                decision = result.output

                # –õ–æ–≥–∏—Ä—É–µ–º –≥–∏–ø–æ—Ç–µ–∑—ã
                hypotheses = decision.get("hypotheses", [])
                LOG.info("üß† –ü–æ–ª—É—á–µ–Ω–æ %d –≥–∏–ø–æ—Ç–µ–∑ –æ—Ç ReasonerAgent", len(hypotheses))
                for i, hyp in enumerate(hypotheses):
                    LOG.info(
                        "  üß™ –ì–∏–ø–æ—Ç–µ–∑–∞ %d: %s.%s (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: %.2f) ‚Äî %s",
                        i,
                        hyp["agent"],
                        hyp["operation"],
                        hyp["confidence"],
                        hyp["reason"],
                    )
                # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥–∏–ø–æ—Ç–µ–∑—É
                if "final_decision" in decision:
                    sel_idx = decision["final_decision"].get("selected_hypothesis", 0)
                    if 0 <= sel_idx < len(hypotheses):
                        sel = hypotheses[sel_idx]
                        LOG.info(
                            "  ‚úÖ –í—ã–±—Ä–∞–Ω–∞ –≥–∏–ø–æ—Ç–µ–∑–∞ %d: %s.%s (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: %.2f)",
                            sel_idx, sel["agent"], sel["operation"], sel["confidence"]
                        )
                # –õ–æ–≥–∏—Ä—É–µ–º —ç—Ç–∞–ø—ã
                needs_proc = decision.get("postprocessing", {}).get("needed", False)
                needs_val = decision.get("validation", {}).get("needed", True)
                LOG.info("üîß –≠—Ç–∞–ø—ã: postprocessing=%s, validation=%s", needs_proc, needs_val)
            else:
                LOG.error("‚ùå Reasoner –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: %s", result.error)
                decision = None
        except Exception as e:
            LOG.exception("üí• –û—à–∏–±–∫–∞ –≤ reasoner_node: %s", e)
            decision = None

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ get_current_tool_call
    tool_call = ctx.get_current_tool_call(step_id)
    if tool_call:
        LOG.info("‚öôÔ∏è reasoner_node: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–∑–æ–≤–∞ %s.%s –¥–ª—è —ç—Ç–∞–ø–∞ %s",
                 tool_call["agent"], tool_call["operation"], ctx.get_current_stage(step_id))
    else:
        LOG.warning("‚ö†Ô∏è reasoner_node: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—ã–∑–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞")

    return ctx.to_dict()