# src/graph/nodes/executor.py
"""
–£–∑–µ–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π.
–¶–µ–ª—å: –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞.
–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:
  - –≤—Ö–æ–¥ –≤ —à–∞–≥ –∏ —ç—Ç–∞–ø
  - –≤—ã–∑–æ–≤ –∞–≥–µ–Ω—Ç–∞ –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
  - —É—Å–ø–µ—à–Ω—ã–π/–æ—à–∏–±–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç—Ç–∞–ø–∞
"""
from __future__ import annotations
import logging
from typing import Any, Dict
from src.model.agent_result import AgentResult
from src.model.context.context import GraphContext

LOG = logging.getLogger(__name__)

def executor_node(state: Dict[str, Any], agent_registry=None) -> Dict[str, Any]:
    if agent_registry is None:
        raise ValueError("executor_node: agent_registry is required")
    ctx = GraphContext.from_state_dict(state)
    step_id = ctx.get_current_step_id()
    if not step_id:
        LOG.warning("‚ö†Ô∏è executor_node: –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞")
        return ctx.to_dict()

    tool_call = ctx.get_current_tool_call(step_id)
    if not tool_call:
        LOG.info("‚ÑπÔ∏è executor_node: –Ω–µ—Ç –≤—ã–∑–æ–≤–∞ –¥–ª—è —à–∞–≥–∞ %s", step_id)
        return ctx.to_dict()

    current_stage = ctx.get_current_stage(step_id)
    LOG.info("‚öôÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ '%s' –¥–ª—è —à–∞–≥–∞ %s", current_stage, step_id)
    LOG.info("üöÄ –ó–∞–ø—É—Å–∫ %s.%s", tool_call["agent"], tool_call["operation"])
    LOG.debug("üì¶ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: %s", tool_call["params"])

    try:
        agent = agent_registry.instantiate_agent(tool_call["agent"])
        result = agent.execute_operation(
            tool_call["operation"],
            tool_call["params"],
            context=ctx.to_dict()
        )
        if isinstance(result, AgentResult):
            ctx.record_agent_call(step_id, result)
            if result.status == "ok":
                if current_stage == "validation":
                    ctx.record_validation_result(step_id, result.output)
                else:
                    ctx.record_step_result(step_id, result.output)
                ctx.mark_stage_completed(step_id, current_stage)
                LOG.info("‚úÖ –≠—Ç–∞–ø '%s' —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è —à–∞–≥–∞ %s", current_stage, step_id)
                LOG.debug("üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç: %s", result.output)
            else:
                LOG.error("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: %s", result.error)
        else:
            LOG.error("‚ùå –ê–≥–µ–Ω—Ç –≤–µ—Ä–Ω—É–ª –Ω–µ AgentResult: %s", type(result))
    except Exception as e:
        LOG.exception("üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ executor_node: %s", e)

    return ctx.to_dict()