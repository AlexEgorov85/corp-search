# src/graph/nodes/executor.py
"""
–£–∑–µ–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (Executor Node).

–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞:
  - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –æ—Ç Reasoner (`selected_tool`).
  - –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ ‚Äî **–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã** –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞,
    –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º (–∞ –Ω–µ —Å —Ä—É—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏).
  - –í—ã–∑–≤–∞—Ç—å –∞–≥–µ–Ω—Ç —Å —ç—Ç–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
  - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ `record_tool_execution_result`.

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
  - –î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –≤—Ä–æ–¥–µ `validate_result`, `synthesize` –ø–∞—Ä–∞–º–µ—Ç—Ä—ã **–Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é** –∏–∑ Reasoner.
    –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ Executor **–∏–Ω–∂–µ–∫—Ç–∏—Ç** –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ `GraphContext`.
  - –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç Reasoner –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è —á–∏—Å—Ç—ã–º: –æ–Ω —Ç–æ–ª—å–∫–æ –≤—ã–±–∏—Ä–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –Ω–µ –∑–∞–±–æ—Ç—è—Å—å –æ –¥–µ—Ç–∞–ª—è—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
  - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ "–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ" –æ–ø–µ—Ä–∞—Ü–∏–∏.

–ü—Ä–∏–º–µ—Ä—ã:
  - Reasoner –≤—ã–±–∏—Ä–∞–µ—Ç:
      selected_tool = {"agent": "ResultValidatorAgent", "operation": "validate_result"}
    Executor –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç:
      params = {
          "subquestion_text": ctx.get_subquestion_text(step_id),
          "raw_output": ctx.get_step_result(step_id)
      }

  - Reasoner –≤—ã–±–∏—Ä–∞–µ—Ç:
      selected_tool = {"agent": "BooksLibraryAgent", "operation": "list_books", "params": {"author": "–ü—É—à–∫–∏–Ω"}}
    Executor –æ—Å—Ç–∞–≤–ª—è–µ—Ç params –∫–∞–∫ –µ—Å—Ç—å.
"""

from __future__ import annotations
import logging
from typing import Any, Dict, Optional

from src.model.agent_result import AgentResult
from src.model.context.base import (
    append_history_event,
    get_current_step_id,
    get_execution_step,
)
from src.model.context.context import GraphContext


LOG = logging.getLogger(__name__)


def _inject_contextual_params(
    tool_call: Dict[str, Any],
    ctx: GraphContext,
    step_id: str
) -> Dict[str, Any]:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.

    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–º—è –∞–≥–µ–Ω—Ç–∞ –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏, –µ—Å–ª–∏ —ç—Ç–æ "–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è" –æ–ø–µ—Ä–∞—Ü–∏—è,
    —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —à–∞–≥–∞ –∏ –ø–ª–∞–Ω–∞.

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:
      - ResultValidatorAgent.validate_result
      - DataAnalysisAgent.analyze

    Args:
        tool_call (dict): –†–µ—à–µ–Ω–∏–µ –æ—Ç Reasoner, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ "agent", "operation", –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ "params".
        ctx (GraphContext): –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞.
        step_id (str): ID —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞.

    Returns:
        Dict[str, Any]: –ì–æ—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã–∑–æ–≤–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏.
    """
    agent_name = tool_call["agent"]
    operation_name = tool_call["operation"]
    base_params = tool_call.get("params", {})

    # === 1. ResultValidatorAgent.validate_result ===
    if agent_name == "ResultValidatorAgent" and operation_name == "validate_result":
        return {
            "subquestion_text": ctx.get_subquestion_text(step_id),
            "raw_output": ctx.get_step_result(step_id)
        }

    # === 2. DataAnalysisAgent (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è) ===
    if agent_name == "DataAnalysisAgent" and operation_name == "analyze":
        return {
            "subquestion_text": ctx.get_subquestion_text(step_id),
            "raw_output": ctx.get_step_result(step_id)
        }

    # === –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–∫ –µ—Å—Ç—å ===
    return base_params


def _execute_tool_call(
    ctx: GraphContext,
    tool_call: Dict[str, Any],
    agent_registry,
    step_id: str
) -> Any:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç—Å–∫–∏–π —Ä–µ–µ—Å—Ç—Ä.

    Args:
        ctx (GraphContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
        tool_call (dict): –û–ø–∏—Å–∞–Ω–∏–µ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
        agent_registry: –†–µ–µ—Å—Ç—Ä –∞–≥–µ–Ω—Ç–æ–≤.
        step_id (str): ID —à–∞–≥–∞ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏–Ω–∂–µ–∫—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤).

    Returns:
        AgentResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏.

    Raises:
        RuntimeError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    """
    agent_name = tool_call["agent"]
    operation = tool_call["operation"]

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    params = _inject_contextual_params(tool_call, ctx, step_id)

    LOG.info("‚öôÔ∏è  Executor: –∑–∞–ø—É—Å–∫–∞–µ–º %s.%s", agent_name, operation)
    agent = agent_registry.instantiate_agent(agent_name)

    if not agent:
        raise RuntimeError(f"–ê–≥–µ–Ω—Ç '{agent_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–µ—Å—Ç—Ä–µ")

    res = agent.execute_operation(operation, params=params, context=ctx.to_dict())

    if not isinstance(res, AgentResult):
        raise RuntimeError(f"–ê–≥–µ–Ω—Ç '{agent_name}' –≤–µ—Ä–Ω—É–ª –Ω–µ AgentResult: {type(res)}")

    if res.status != "ok":
        raise RuntimeError(f"–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {res.error or res.content}")

    return res


def executor_node(state: Dict[str, Any], agent_registry=None) -> Dict[str, Any]:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —É–∑–µ–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.

    –õ–æ–≥–∏–∫–∞:
      1. –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–≥ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
      2. –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –æ—Ç Reasoner (`selected_tool`).
      3. –ï—Å–ª–∏ —Ä–µ—à–µ–Ω–∏–µ –µ—Å—Ç—å ‚Äî –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.
      4. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—É—Å–ø–µ—Ö –∏–ª–∏ –æ—à–∏–±–∫–∞) –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç.
      5. –ó–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ.

    Args:
        state (Dict[str, Any]): –°–æ—Å—Ç–æ—è–Ω–∏–µ –≥—Ä–∞—Ñ–∞ (GraphContext –≤ –≤–∏–¥–µ dict).
        agent_registry: –†–µ–µ—Å—Ç—Ä –∞–≥–µ–Ω—Ç–æ–≤ (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω).

    Returns:
        Dict[str, Any]: –û–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥—Ä–∞—Ñ–∞.
    """
    if agent_registry is None:
        raise ValueError("executor_node: agent_registry is required")

    ctx = state if isinstance(state, GraphContext) else GraphContext.from_state_dict(state)
    step_id = get_current_step_id(ctx)

    if not step_id:
        LOG.warning("‚ö†Ô∏è Executor: –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞")
        append_history_event(ctx, {"type": "executor_no_step"})
        return ctx.to_dict()

    step = get_execution_step(ctx, step_id)
    if not step:
        LOG.warning("‚ö†Ô∏è Executor: —à–∞–≥ %s –Ω–µ –Ω–∞–π–¥–µ–Ω", step_id)
        return ctx.to_dict()

    # === –ü–æ–ª—É—á–∞–µ–º –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ API –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ===
    tool_call = ctx.get_tool_call_for_executor(step_id)
    if not tool_call:
        LOG.info("‚ÑπÔ∏è  Executor: –Ω–µ—Ç selected_tool –¥–ª—è —à–∞–≥–∞ %s", step_id)
        return ctx.to_dict()

    try:
        result = _execute_tool_call(ctx, tool_call, agent_registry, step_id)
        # === –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ API –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ===
        ctx.record_tool_execution_result(step_id, result)
        LOG.info("‚úÖ  Executor: —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è —à–∞–≥–∞ %s", step_id)
        append_history_event(ctx, {
            "type": "executor_success",
            "step_id": step_id,
            "agent": tool_call["agent"],
            "operation": tool_call["operation"]
        })
    except Exception as e:
        error_msg = str(e)
        LOG.exception("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è —à–∞–≥–∞ %s: %s", step_id, e)
        # === –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ API –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ===
        ctx.record_tool_execution_result(step_id, result=None, error=error_msg)
        append_history_event(ctx, {
            "type": "executor_error",
            "step_id": step_id,
            "error": error_msg
        })

    return ctx.to_dict()