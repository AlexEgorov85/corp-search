# src/graph/nodes/planner.py
# coding: utf-8
"""
planner_node ‚Äî —É–∑–µ–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
–¶–µ–ª—å: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω (–¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—é –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥–≤–æ–ø—Ä–æ—Å—ã) —Å –ø–æ–º–æ—â—å—é PlannerAgent.

–ö–æ–Ω—Ç—Ä–∞–∫—Ç:
- –í—Ö–æ–¥: dict —Å –∫–ª—é—á–æ–º "question"
- –í—ã—Ö–æ–¥: dict —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º execution.steps, current_subquestion_id –∏ memory["plan"]

–ü—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–∞:
{
    "question": "–ù–∞–π–¥–∏ –∫–Ω–∏–≥–∏ –ü—É—à–∫–∏–Ω–∞ –∏ —É–∫–∞–∂–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–∑ –Ω–∏—Ö?"
}

–ü—Ä–∏–º–µ—Ä –≤—ã—Ö–æ–¥–∞ (–ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ plan):
{
    "question": "...",
    "execution": {
        "current_subquestion_id": "q1",
        "steps": {
            "q1": {"id": "q1", "subquestion_text": "–ö–∞–∫–∏–µ –∫–Ω–∏–≥–∏ –Ω–∞–ø–∏—Å–∞–ª –ü—É—à–∫–∏–Ω?", "status": "pending"},
            "q2": {"id": "q2", "subquestion_text": "–ö–∞–∫–∞—è –∏–∑ –∫–Ω–∏–≥ ‚Äî –ø–æ—Å–ª–µ–¥–Ω—è—è?", "status": "pending"},
            "q3": {"id": "q3", "subquestion_text": "–ö—Ç–æ –≥–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–Ω–∏–≥–µ?", "status": "pending"}
        }
    },
    "memory": {
        "plan": {
            "subquestions": [
                {"id": "q1", "text": "–ö–∞–∫–∏–µ –∫–Ω–∏–≥–∏ –Ω–∞–ø–∏—Å–∞–ª –ü—É—à–∫–∏–Ω?", "depends_on": []},
                {"id": "q2", "text": "–ö–∞–∫–∞—è –∏–∑ –∫–Ω–∏–≥ ‚Äî –ø–æ—Å–ª–µ–¥–Ω—è—è?", "depends_on": ["q1"]},
                {"id": "q3", "text": "–ö—Ç–æ –≥–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–Ω–∏–≥–µ?", "depends_on": ["q2"]}
            ]
        }
    }
}
"""
from __future__ import annotations
import logging
from typing import Dict, Any, Optional
from src.graph.context_model import GraphContext
from src.graph.context_ops import (
    get_question,
    set_plan,
    ensure_step,
    set_current_subquestion_id,
    append_history_event,
)
from src.services.results.agent_result import AgentResult

LOG = logging.getLogger(__name__)


def _build_tool_registry_snapshot(full_tool_registry: Dict[str, Any]) -> Dict[str, Any]:
    """
    –°–æ–∑–¥–∞—ë—Ç —É–ø—Ä–æ—â—ë–Ω–Ω—É—é –∏ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–æ–ø–∏—é tool_registry –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ PlannerAgent.
    –£–¥–∞–ª—è–µ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (implementation, config –∏ —Ç.–¥.), –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ:
      - title
      - description
      - operations (—Å –∏—Ö kind, description, params, outputs)

    –ü—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–∞:
    {
        "BooksLibraryAgent": {
            "implementation": "src.agents.BooksLibraryAgent.core:BooksLibraryAgent",
            "config": {"db_uri": "..."},
            "title": "–ë–∞–∑–∞ –∫–Ω–∏–≥",
            "description": "–î–æ—Å—Ç—É–ø –∫ –∫–Ω–∏–≥–∞–º –∏ –∞–≤—Ç–æ—Ä–∞–º",
            "operations": {
                "list_books": {"description": "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥", "kind": "direct"}
            }
        }
    }

    –ü—Ä–∏–º–µ—Ä –≤—ã—Ö–æ–¥–∞:
    {
        "BooksLibraryAgent": {
            "title": "–ë–∞–∑–∞ –∫–Ω–∏–≥",
            "description": "–î–æ—Å—Ç—É–ø –∫ –∫–Ω–∏–≥–∞–º –∏ –∞–≤—Ç–æ—Ä–∞–º",
            "operations": {
                "list_books": {"description": "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥", "kind": "direct"}
            }
        }
    }
    """
    snapshot = {}
    for name, meta in full_tool_registry.items():
        if not isinstance(meta, dict):
            snapshot[name] = {}
            continue
        safe_meta = {
            "title": meta.get("title", ""),
            "description": meta.get("description", ""),
            "operations": {}
        }
        ops = meta.get("operations", {})
        if isinstance(ops, dict):
            for op_name, op_meta in ops.items():
                if not isinstance(op_meta, dict):
                    safe_meta["operations"][op_name] = {"description": ""}
                    continue
                safe_meta["operations"][op_name] = {
                    "kind": op_meta.get("kind", "direct"),
                    "description": op_meta.get("description", ""),
                    "params": op_meta.get("params", {}),
                    "outputs": op_meta.get("outputs", {})
                }
        snapshot[name] = safe_meta
    return snapshot


def planner_node(state: Dict[str, Any], agent_registry=None) -> Dict[str, Any]:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–∑–ª–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
    –õ–æ–≥–∏–∫–∞:
      1. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤—Ö–æ–¥–Ω–æ–π state –≤ GraphContext.
      2. –ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å.
      3. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—É—Å—Ç ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å –æ—à–∏–±–∫–æ–π.
      4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å PlannerAgent.
      5. –°–æ–±—Ä–∞—Ç—å snapshot –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
      6. –í—ã–∑–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é "plan".
      7. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ ctx.memory["plan"] –∏ —Å–æ–∑–¥–∞—Ç—å —à–∞–≥–∏.
      8. –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback (1 —à–∞–≥).
    """
    # üîÅ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ö–æ–¥–Ω–æ–π dict –≤ GraphContext (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç)
    ctx = state if isinstance(state, GraphContext) else GraphContext.from_state_dict(state)
    LOG.info("üîÑ planner_node: –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

    # üì• –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é)
    question = get_question(ctx) or ""
    if not question.strip():
        LOG.warning("‚ö†Ô∏è planner_node: –≤–æ–ø—Ä–æ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        append_history_event(ctx, {"type": "planner_no_question"})
        return ctx.to_legacy_state()

    LOG.info(f"üìù planner_node: –∏—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å: {question}")

    # üß† –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PlannerAgent
    if agent_registry is not None:
        planner_agent = None
        try:
            # üß™ –ò–Ω—Å—Ç–∞–Ω—Ü–∏—Ä—É–µ–º PlannerAgent
            planner_agent = agent_registry.instantiate_agent("PlannerAgent", control=True)
            LOG.debug("‚úÖ planner_node: PlannerAgent —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            LOG.error(f"‚ùå planner_node: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PlannerAgent: {e}")
            append_history_event(ctx, {"type": "planner_instantiate_failed", "error": str(e)})

        if planner_agent is not None:
            try:
                # üì¶ –°–æ–±–∏—Ä–∞–µ–º snapshot –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                full_tool_registry = agent_registry.tool_registry
                tool_registry_snapshot = _build_tool_registry_snapshot(full_tool_registry)
                LOG.debug(f"üõ†Ô∏è planner_node: —Å–æ–±—Ä–∞–Ω snapshot –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è {len(tool_registry_snapshot)} –∞–≥–µ–Ω—Ç–æ–≤")

                # üöÄ –í—ã–∑—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é plan —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                params = {
                    "question": question,
                    "tool_registry_snapshot": tool_registry_snapshot
                }
                LOG.info("üß† planner_node: –≤—ã–∑–æ–≤ PlannerAgent.execute_operation('plan', ...)")
                res = planner_agent.execute_operation("plan", params, context={})

                # ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if isinstance(res, AgentResult) and res.status == "ok":
                    plan_struct = res.structured or res.content or {}
                    LOG.info(f"‚úÖ planner_node: –ø–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {plan_struct}")

                    # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ ctx.memory (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!)
                    set_plan(ctx, plan_struct)

                    # ‚ûï –°–æ–∑–¥–∞—ë–º —à–∞–≥–∏ –∏–∑ –ø–æ–¥–≤–æ–ø—Ä–æ—Å–æ–≤
                    subqs = plan_struct.get("subquestions") if isinstance(plan_struct, dict) else None
                    if subqs:
                        first_id: Optional[str] = None
                        for s in subqs:
                            sid = s.get("id") or f"sq_{len(ctx.execution.steps) + 1}"
                            text = s.get("text") or s.get("title") or ""
                            LOG.debug(f"‚ûï planner_node: —Å–æ–∑–¥–∞—ë–º —à–∞–≥ {sid}: {text}")
                            ensure_step(ctx, sid, subquestion_text=text)
                            if first_id is None:
                                first_id = sid

                        if first_id:
                            set_current_subquestion_id(ctx, first_id)
                            LOG.info(f"üéØ planner_node: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—É—â–∏–π –ø–æ–¥–≤–æ–ø—Ä–æ—Å: {first_id}")

                    append_history_event(ctx, {
                        "type": "planner_agent_generated_plan",
                        "plan_summary": str(plan_struct)[:300]
                    })
                    return ctx.to_legacy_state()

                else:
                    # ‚ùå –û—à–∏–±–∫–∞ –æ—Ç –∞–≥–µ–Ω—Ç–∞
                    error_msg = res.content if hasattr(res, "content") else str(res)
                    LOG.error(f"‚ùå planner_node: PlannerAgent –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {error_msg}")
                    append_history_event(ctx, {
                        "type": "planner_agent_failed",
                        "result": error_msg
                    })

            except Exception as e:
                LOG.exception(f"üí• planner_node: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ PlannerAgent: {e}")
                append_history_event(ctx, {
                    "type": "planner_agent_execute_failed",
                    "error": str(e)
                })

    # üõü FALLBACK: —Å–æ–∑–¥–∞—ë–º –æ–¥–∏–Ω —à–∞–≥ —Å –∏—Å—Ö–æ–¥–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
    LOG.warning("‚ö†Ô∏è planner_node: –ø–µ—Ä–µ—Ö–æ–¥ –≤ fallback-—Ä–µ–∂–∏–º")
    step_id = "q1"
    ensure_step(ctx, step_id, subquestion_text=question, status="pending")
    set_current_subquestion_id(ctx, step_id)
    fallback_plan = {"subquestions": [{"id": step_id, "text": question}]}
    set_plan(ctx, fallback_plan)  # ‚Üê –≤–∞–∂–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–∂–µ fallback-–ø–ª–∞–Ω!
    LOG.info(f"üõ°Ô∏è planner_node: —Å–æ–∑–¥–∞–Ω fallback-–ø–ª–∞–Ω —Å —à–∞–≥–æ–º {step_id}")
    append_history_event(ctx, {
        "type": "planner_fallback_created_step",
        "step_id": step_id
    })
    return ctx.to_legacy_state()