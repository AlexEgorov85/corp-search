# src/graph/nodes/planner.py
# coding: utf-8
"""
planner_node ‚Äî —É–∑–µ–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
–¶–µ–ª—å: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω (–¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—é –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥–≤–æ–ø—Ä–æ—Å—ã) —Å –ø–æ–º–æ—â—å—é PlannerAgent.
–ö–æ–Ω—Ç—Ä–∞–∫—Ç:
- –í—Ö–æ–¥: GraphContext —Å –≤–æ–ø—Ä–æ—Å–æ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —á–µ—Ä–µ–∑ set_question()
- –í—ã—Ö–æ–¥: GraphContext —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º ctx.plan –∫–∞–∫ –æ–±—ä–µ–∫—Ç Plan (Pydantic)
"""
from __future__ import annotations
import logging
from typing import Any, Dict, Optional
from src.model.agent_result import AgentResult
from src.model.context.base import append_history_event, get_question, set_plan
from src.model.context.context import GraphContext
from src.model.context.models import Plan, SubQuestion
from src.utils.utils import build_tool_registry_snapshot

LOG = logging.getLogger(__name__)


def planner_node(state: Dict[str, Any], agent_registry=None) -> Dict[str, Any]:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–∑–ª–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
    –õ–æ–≥–∏–∫–∞:
      1. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤—Ö–æ–¥–Ω–æ–π state –≤ GraphContext.
      2. –ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ get_question(ctx).
      3. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—É—Å—Ç ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å –æ—à–∏–±–∫–æ–π.
      4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å PlannerAgent.
      5. –°–æ–±—Ä–∞—Ç—å snapshot –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
      6. –í—ã–∑–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é "plan".
      7. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ ctx.plan —á–µ—Ä–µ–∑ set_plan(ctx, plan_obj).
      8. –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback (1 —à–∞–≥).
    """
    # üîÅ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ö–æ–¥–Ω–æ–π dict –≤ GraphContext
    ctx = state if isinstance(state, GraphContext) else GraphContext.from_state_dict(state)
    LOG.info("üîÑ planner_node: –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

    # üì• –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ API –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    question = get_question(ctx) or ""
    if not question.strip():
        LOG.warning("‚ö†Ô∏è planner_node: –≤–æ–ø—Ä–æ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        append_history_event(ctx, {"type": "planner_no_question"})
        return ctx.to_dict()

    LOG.info(f"üìù planner_node: –∏—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å: {question}")

    # üß† –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PlannerAgent
    if agent_registry is not None:
        planner_agent = None
        try:
            planner_agent = agent_registry.instantiate_agent("PlannerAgent", control=True)
            LOG.debug("‚úÖ planner_node: PlannerAgent —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            LOG.error(f"‚ùå planner_node: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PlannerAgent: {e}")
            append_history_event(ctx, {"type": "planner_instantiate_failed", "error": str(e)})

        if planner_agent is not None:
            try:
                # üì¶ –°–æ–±–∏—Ä–∞–µ–º snapshot –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ AgentRegistry
                tool_registry_snapshot = build_tool_registry_snapshot(agent_registry)
                LOG.debug(
                    f"üõ†Ô∏è planner_node: —Å–æ–±—Ä–∞–Ω snapshot –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è {len(tool_registry_snapshot)} –∞–≥–µ–Ω—Ç–æ–≤"
                )

                # üöÄ –í—ã–∑—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é plan
                params = {
                    "question": question,
                    "tool_registry_snapshot": tool_registry_snapshot,
                }
                LOG.info("üß† planner_node: –≤—ã–∑–æ–≤ PlannerAgent.execute_operation('plan', ...)")
                res = planner_agent.execute_operation("plan", params, context={})

                # ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if isinstance(res, AgentResult) and res.status == "ok":
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ output ‚Üí plan
                    plan_struct = res.output.get("plan") if isinstance(res.output, dict) else {}
                    LOG.info(f"‚úÖ planner_node: –ø–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {plan_struct}")

                    # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –∫–∞–∫ Pydantic-–º–æ–¥–µ–ª—å Plan
                    subquestions = []
                    raw_subs = plan_struct.get("subquestions", [])
                    if not isinstance(raw_subs, list):
                        LOG.error("‚ùå planner_node: 'subquestions' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º")
                        raw_subs = []

                    for sq in raw_subs:
                        if not isinstance(sq, dict):
                            continue
                        subquestions.append(
                            SubQuestion(
                                id=str(sq.get("id", "")),
                                text=str(sq.get("text", "")),
                                depends_on=sq.get("depends_on", []),  # ‚Üê –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                            )
                        )

                    plan_obj = Plan(subquestions=subquestions)
                    set_plan(ctx, plan_obj)  # ‚Üê –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    append_history_event(
                        ctx,
                        {
                            "type": "planner_agent_generated_plan",
                            "plan_summary": str(plan_struct)[:300],
                        },
                    )
                    return ctx.to_dict()

                else:
                    # ‚ùå –û—à–∏–±–∫–∞ –æ—Ç –∞–≥–µ–Ω—Ç–∞
                    error_msg = res.error or str(res)
                    LOG.error(f"‚ùå planner_node: PlannerAgent –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {error_msg}")
                    append_history_event(
                        ctx,
                        {
                            "type": "planner_agent_failed",
                            "error": error_msg,
                        },
                    )

            except Exception as e:
                LOG.exception(f"üí• planner_node: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ PlannerAgent: {e}")
                append_history_event(
                    ctx,
                    {
                        "type": "planner_agent_execute_failed",
                        "error": str(e),
                    },
                )

    # üõü FALLBACK: —Å–æ–∑–¥–∞—ë–º –æ–¥–∏–Ω —à–∞–≥ —Å –∏—Å—Ö–æ–¥–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
    LOG.warning("‚ö†Ô∏è planner_node: –ø–µ—Ä–µ—Ö–æ–¥ –≤ fallback-—Ä–µ–∂–∏–º")
    fallback_plan = Plan(
        subquestions=[
            SubQuestion(id="q1", text=question, depends_on=[])
        ]
    )
    set_plan(ctx, fallback_plan)  # ‚Üê –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    LOG.info("üõ°Ô∏è planner_node: —Å–æ–∑–¥–∞–Ω fallback-–ø–ª–∞–Ω —Å —à–∞–≥–æ–º q1")
    append_history_event(
        ctx,
        {
            "type": "planner_fallback_created_step",
            "step_id": "q1",
        },
    )
    return ctx.to_dict()