# src/graph/nodes/synthesizer.py
"""
–£–∑–µ–ª —Å–∏–Ω—Ç–µ–∑–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.
–¶–µ–ª—å: —Å–æ–±—Ä–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç.
–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:
  - –≤—Ö–æ–¥ –≤ —Å–∏–Ω—Ç–µ–∑
  - –≤—ã–∑–æ–≤ SynthesizerAgent
  - —É—Å–ø–µ—à–Ω—ã–π/–æ—à–∏–±–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  - fallback –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
"""
from __future__ import annotations
import logging
from typing import Any, Dict
from src.model.agent_result import AgentResult
from src.model.context.context import GraphContext

LOG = logging.getLogger(__name__)

def synthesizer_node(state: Dict[str, Any], agent_registry=None) -> Dict[str, Any]:
    ctx = GraphContext.from_state_dict(state)
    if ctx.get_final_answer() is not None:
        LOG.info("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —É–∂–µ —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω")
        return ctx.to_dict()

    step_outputs = ctx.get_all_completed_step_results()
    if not step_outputs:
        LOG.warning("‚ö†Ô∏è synthesizer_node: –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —à–∞–≥–æ–≤")
        ctx.set_final_answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∏ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞.")
        return ctx.to_dict()

    LOG.info("üéØ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ç–µ–∑–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –®–∞–≥–æ–≤: %d", len(step_outputs))

    if agent_registry is None:
        LOG.warning("‚ö†Ô∏è synthesizer_node: agent_registry –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
        last_result = list(step_outputs.values())[-1]
        ctx.set_final_answer(str(last_result))
        return ctx.to_dict()

    try:
        synth_agent = agent_registry.instantiate_agent("SynthesizerAgent", control=True)
        result = synth_agent.execute_operation("synthesize", {
            "question": ctx.get_question(),
            "plan": ctx.get_plan().to_dict(),
            "step_outputs": step_outputs
        })
        if isinstance(result, AgentResult) and result.status == "ok":
            final_answer = result.output.get("final_answer", str(result.output))
            ctx.set_final_answer(final_answer)
            LOG.info("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω")
            LOG.debug("üìÑ –û—Ç–≤–µ—Ç: %.200s", final_answer)
        else:
            raise ValueError(result.error)
    except Exception as e:
        LOG.warning("‚ö†Ô∏è synthesizer fallback: %s", e)
        last_result = list(step_outputs.values())[-1]
        ctx.set_final_answer(str(last_result))
        LOG.info("üõ°Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")

    return ctx.to_dict()