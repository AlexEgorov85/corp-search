# src/graph/nodes/next_subquestion.py
"""
next_subquestion_node ‚Äî —É–∑–µ–ª –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–¥–≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
–¶–µ–ª—å:
- –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–π –∏–∑ –ø–æ–¥–≤–æ–ø—Ä–æ—Å–æ–≤ –ø–ª–∞–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å–ª–µ–¥—É—é—â–∏–º.
- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ –∫–∞–∫ —Ç–µ–∫—É—â–∏–π —à–∞–≥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
- –ó–∞–≤–µ—Ä—à–∏—Ç—å –≥—Ä–∞—Ñ, –µ—Å–ª–∏ –≤—Å–µ —à–∞–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.

–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:
- –†–∞–±–æ—Ç–∞–µ—Ç —Å GraphContext –∏–∑ src/model/context/context.py
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ Plan (Pydantic), –Ω–µ dict
"""

from __future__ import annotations
from typing import Any, Dict, List
import logging

from src.model.context.base import (
    append_history_event,
    ensure_execution_step,
    get_plan,
    set_current_step_id,
    is_step_completed,
)
from src.model.context.context import GraphContext

LOG = logging.getLogger(__name__)


def next_subquestion_node(state: Dict[str, Any], agent_registry=None) -> Dict[str, Any]:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–∑–ª–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–¥–≤–æ–ø—Ä–æ—Å–∞.
    Args:
        state (Dict[str, Any]): –í—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥—Ä–∞—Ñ–∞.
        agent_registry: –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (–ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏).
    Returns:
        Dict[str, Any]: –û–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥—Ä–∞—Ñ–∞.
    """
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ö–æ–¥–Ω–æ–π state –≤ GraphContext
    ctx = state if isinstance(state, GraphContext) else GraphContext.from_state_dict(state)

    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω —á–µ—Ä–µ–∑ API
    plan = get_plan(ctx)
    if not plan or not plan.subquestions:
        LOG.warning("‚ö†Ô∏è  next_subquestion: –ø–ª–∞–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç")
        append_history_event(ctx, {"type": "next_subquestion_no_plan"})
        return _finish_graph(ctx)

    # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π —à–∞–≥, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    for sq in plan.subquestions:
        if not _are_dependencies_satisfied(ctx, sq.depends_on):
            continue
        if is_step_completed(ctx, sq.id):
            continue

        # üéØ –í—ã–±–∏—Ä–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥
        ensure_execution_step(ctx, sq.id)  # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —à–∞–≥–∞
        set_current_step_id(ctx, sq.id)
        LOG.info(f"‚û°Ô∏è  next_subquestion: –≤—ã–±—Ä–∞–Ω —à–∞–≥ {sq.id}")
        append_history_event(ctx, {"type": "next_subquestion_selected", "step_id": sq.id})
        return ctx.to_dict()

    # üèÅ –í—Å–µ —à–∞–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
    LOG.info("üèÅ  next_subquestion: –≤—Å–µ —à–∞–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
    set_current_step_id(ctx, None)
    return _finish_graph(ctx)


def _are_dependencies_satisfied(ctx: GraphContext, depends_on: List[str]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã."""
    for dep_id in depends_on:
        if not is_step_completed(ctx, dep_id):
            return False
    return True


def _finish_graph(ctx: GraphContext) -> Dict[str, Any]:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≥—Ä–∞—Ñ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å finished=True."""
    out = ctx.to_dict()
    out["finished"] = True
    append_history_event(ctx, {"type": "next_subquestion_all_done"})
    return out