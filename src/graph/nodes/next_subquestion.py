# src/graph/nodes/next_subquestion.py
"""
–£–∑–µ–ª –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–¥–≤–æ–ø—Ä–æ—Å–∞.
–¶–µ–ª—å: –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–π —à–∞–≥ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≥—Ä–∞—Ñ.
–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:
  - –≤—Å–µ —à–∞–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã ‚Üí –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
  - –≤—ã–±—Ä–∞–Ω —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Üí –µ–≥–æ ID –∏ —Ç–µ–∫—Å—Ç
"""
from __future__ import annotations
import logging
from typing import Any, Dict
from src.model.context.context import GraphContext

LOG = logging.getLogger(__name__)

def next_subquestion_node(state: Dict[str, Any], agent_registry=None) -> Dict[str, Any]:
    ctx = GraphContext.from_state_dict(state)
    if ctx.all_steps_completed():
        LOG.info("‚úÖ –í—Å–µ —à–∞–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –ì—Ä–∞—Ñ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
        ctx.set_current_step_id(None)
        return ctx.to_dict()

    next_step_id = ctx.select_next_step()
    if next_step_id:
        ctx.start_step(next_step_id)
        subq_text = ctx.get_subquestion_text(next_step_id)
        LOG.info("‚û°Ô∏è –í—ã–±—Ä–∞–Ω —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥: %s", next_step_id)
        LOG.debug("üìÑ –¢–µ–∫—Å—Ç –ø–æ–¥–≤–æ–ø—Ä–æ—Å–∞: %s", subq_text)
    else:
        LOG.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥. –ó–∞–≤–µ—Ä—à–∞–µ–º –≥—Ä–∞—Ñ.")
        ctx.set_current_step_id(None)

    return ctx.to_dict()