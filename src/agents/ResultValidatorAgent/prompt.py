# src/agents/ResultValidatorAgent/prompt.py
"""
–ü—Ä–æ–º–ø—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤—ã–≤–æ–¥–æ–º.
–ù–æ–≤–∞—è —Å—Ö–µ–º–∞:
{
  "reasoning": [
    "V1: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ–¥–≤–æ–ø—Ä–æ—Å?",
    "V2: –î–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É?",
    "V3: –ï—Å—Ç—å –ª–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö?",
    "V4: –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–≤–µ—Ç–∞?"
  ],
  "validation": {
    "is_valid": true|false,
    "confidence": 0.0‚Äì1.0,
    "reason": "–ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ V1‚ÄìV4",
    "explanation": "–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"
  }
}
"""

from typing import Any, Dict, List, Optional
import json

def build_validation_prompt(
    subquestion_text: str,
    raw_output: Any,
    agent_calls: List[Dict] = None,
    step_state: Dict = None,
) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ —Å —á—ë—Ç–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –æ—Ç–≤–µ—Ç–∞.
    """
    # --- –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ---
    try:
        output_str = json.dumps(raw_output, ensure_ascii=False, indent=2)
    except Exception:
        output_str = str(raw_output)

    # --- –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—ã–∑–æ–≤–æ–≤ ---
    calls_str = "–ù–µ—Ç –≤—ã–∑–æ–≤–æ–≤."
    if agent_calls:
        call_lines = []
        for i, call in enumerate(agent_calls, 1):
            agent_name = call.get("agent", "?")
            op = call.get("operation", "?")
            status = call.get("status", "?")
            summary = call.get("summary", "‚Äî")
            error = call.get("error", "")
            if error:
                summary += f" [–û–®–ò–ë–ö–ê: {error}]"
            call_lines.append(f"{i}. [{status}] {agent_name}.{op}: {summary}")
        calls_str = "\n".join(call_lines)

    # --- –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —à–∞–≥–∞ ---
    state_str = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
    if step_state:
        try:
            state_str = json.dumps(step_state, ensure_ascii=False, indent=2)
        except Exception:
            state_str = str(step_state)

    return f"""–¢—ã ‚Äî –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å—Ç—Ä–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –ø–æ–¥–≤–æ–ø—Ä–æ—Å,
**—Å —É—á—ë—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —à–∞–≥–∞**.

### –ü–æ–¥–≤–æ–ø—Ä–æ—Å
{subquestion_text}

### –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞ (raw_output)
{output_str}

### –ò—Å—Ç–æ—Ä–∏—è –≤—ã–∑–æ–≤–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤
{calls_str}

### –°–æ—Å—Ç–æ—è–Ω–∏–µ —à–∞–≥–∞
{state_str}

### üìå –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–æ—Ç–≤–µ—Ç—å –Ω–∞ V1‚ÄìV4 –∏ –≤–∫–ª—é—á–∏ –≤ "reasoning")
V1. –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ–¥–≤–æ–ø—Ä–æ—Å?
V2. –î–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É?
V3. –ï—Å—Ç—å –ª–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö?
V4. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–≤–µ—Ç–∞?

### üìè –°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê
{{
  "reasoning": ["V1: ...", "V2: ...", "V3: ...", "V4: ..."],
  "validation": {{
    "is_valid": true|false,
    "confidence": 0.0‚Äì1.0,
    "reason": "–ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ V1‚ÄìV4",
    "explanation": "–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
  }}
}}

### ‚ö†Ô∏è –í–ê–ñ–ù–û
- –ù–ò–ö–ê–ö–û–ì–û –¢–ï–ö–°–¢–ê –í–ù–ï JSON.
- –ù–∞—á–Ω–∏ —Å '{{', –∑–∞–∫–æ–Ω—á–∏ '}}'.
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown, –ø–æ—è—Å–Ω–µ–Ω–∏—è, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.
"""