# src/agents/ReasonerAgent/prompts.py
from __future__ import annotations
from typing import Dict, Any, Optional, List
import json
import textwrap

def build_universal_reasoner_prompt(
    question: str,
    step_outputs: Optional[Dict[str, Any]] = None,
    tool_registry_snapshot: Optional[Dict[str, Any]] = None,
    step_state: Optional[Dict[str, Any]] = None,
) -> List[Dict[str, str]]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è ReasonerAgent —Å —á—ë—Ç–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –∏ –±–µ–∑ –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤.
    """
    system_content = textwrap.dedent("""\
        –¢–´ ‚Äî ReasonerAgent –≤ ReAct-—Å–∏—Å—Ç–µ–º–µ. –¢–í–û–Ø –ó–ê–î–ê–ß–ê ‚Äî –í–ï–†–ù–£–¢–¨ –¢–û–õ–¨–ö–û –í–ê–õ–ò–î–ù–´–ô JSON.

        ### üîç –ß—Ç–æ —Ç–∞–∫–æ–µ –≥–∏–ø–æ—Ç–µ–∑–∞?
        –ì–∏–ø–æ—Ç–µ–∑–∞ ‚Äî —ç—Ç–æ **–æ–¥–∏–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞**, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–æ–¥–≤–æ–ø—Ä–æ—Å.
        –§–æ—Ä–º–∞—Ç:
        {
          "agent": "<–∏–º—è –∞–≥–µ–Ω—Ç–∞>",
          "operation": "<–∏–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏>",
          "params": { /* —Å—Ç—Ä–æ–≥–æ –ø–æ —Å—Ö–µ–º–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ */ },
          "confidence": 0.0‚Äì1.0,
          "reason": "–ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ R3‚ÄìR6",
          "explanation": "–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
        }

        ### üìå –ü—Ä–∞–≤–∏–ª–∞
        1. **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–∏–ø–æ—Ç–µ–∑**: –æ–±—ã—á–Ω–æ 1. –ú–∞–∫—Å–∏–º—É–º ‚Äî 2‚Äì3.
        2. **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã**: –∑–∞–ø–æ–ª–Ω—è–π –¢–û–õ–¨–ö–û –∏–∑ –ø–æ–¥–≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ step_outputs. –ù–µ–ª—å–∑—è –≤—ã–¥—É–º—ã–≤–∞—Ç—å!
        3. **–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ –µ—Å—Ç—å –≤ step_outputs** ‚Üí hypotheses = [], selected_hypothesis = -1.
        4. **–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ** ‚Üí hypotheses = [], selected_hypothesis = -1.

        ### üß† –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–æ—Ç–≤–µ—Ç—å –Ω–∞ R1‚ÄìR7 –∏ –≤–∫–ª—é—á–∏ –≤ "reasoning")
        R1. –ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ–∂–∏–¥–∞–µ—Ç—Å—è? (—Å–ø–∏—Å–æ–∫, —Å–∫–∞–ª—è—Ä, –æ–±—ä–µ–∫—Ç, —Ç–µ–∫—Å—Ç)
        R2. –ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤ —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã?
        R3. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –±–µ–∑ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞?
        R4. –ö–∞–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞?
        R5. –í—Å–µ –ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã?
        R6. –ú–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—É—é –æ–ø–µ—Ä–∞—Ü–∏—é (DIRECT –≤–º–µ—Å—Ç–æ SEMANTIC)?
        R7. –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞?

        ### üìè –°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –°–õ–ï–î–£–ô –≠–¢–û–ô –°–•–ï–ú–ï)
        {
          "reasoning": ["R1: ...", "R2: ...", ..., "R7: ..."],
          "hypotheses": [ ... ],
          "postprocessing": {
            "needed": true|false,
            "confidence": 0.0‚Äì1.0,
            "reason": "...",
            "explanation": "–ü–æ—á–µ–º—É —Ç—Ä–µ–±—É–µ—Ç—Å—è/–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞?"
          },
          "validation": {
            "needed": true|false,
            "confidence": 0.0‚Äì1.0,
            "reason": "...",
            "explanation": "–ü–æ—á–µ–º—É —Ç—Ä–µ–±—É–µ—Ç—Å—è/–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–∞–ª–∏–¥–∞—Ü–∏—è?"
          },
          "final_decision": {
            "selected_hypothesis": -1 –∏–ª–∏ –∏–Ω–¥–µ–∫—Å,
            "explanation": "–ò—Ç–æ–≥–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –≤—ã–±–æ—Ä–∞ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
          }
        }

        ### ‚ö†Ô∏è –í–ê–ñ–ù–û
        - –ù–ò–ö–ê–ö–û–ì–û –¢–ï–ö–°–¢–ê –í–ù–ï JSON.
        - –ù–∞—á–Ω–∏ —Å '{', –∑–∞–∫–æ–Ω—á–∏ '}'.
        - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown, –ø–æ—è—Å–Ω–µ–Ω–∏—è, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.
    """)

    # --- –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —á–∞—Å—Ç—å ---
    user_parts = [f"### ‚ùì –ü–æ–¥–≤–æ–ø—Ä–æ—Å\n{question}"]

    if step_outputs:
        user_parts.append("### üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥—Ä—É–≥–∏—Ö —à–∞–≥–æ–≤")
        user_parts.append(json.dumps(step_outputs, ensure_ascii=False, indent=2))
    else:
        user_parts.append("### üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥—Ä—É–≥–∏—Ö —à–∞–≥–æ–≤\n–ù–µ—Ç")

    if tool_registry_snapshot:
        user_parts.append("### üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        user_parts.append(json.dumps(tool_registry_snapshot, ensure_ascii=False, indent=2))
    else:
        user_parts.append("### üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã\n–ù–µ—Ç")

    if step_state:
        safe_state = {k: v for k, v in step_state.items() if k in ("retry_count", "validation_feedback")}
        if safe_state:
            user_parts.append("### üß† –°–æ—Å—Ç–æ—è–Ω–∏–µ —à–∞–≥–∞")
            user_parts.append(json.dumps(safe_state, ensure_ascii=False, indent=2))

    user_content = "\n\n".join(user_parts)

    return [
        {"role": "system", "content": system_content.strip()},
        {"role": "user", "content": user_content.strip()}
    ]