# src/agents/ReasonerAgent/prompts.py
from __future__ import annotations
from typing import Dict, Any, Optional
import json
import textwrap

def build_universal_reasoner_prompt(
    question: str,
    step_outputs: Optional[Dict[str, Any]] = None,
    tool_registry_snapshot: Optional[Dict[str, Any]] = None,
    step_state: Optional[Dict[str, Any]] = None,
) -> str:
    # === 1. –°–∏—Å—Ç–µ–º–Ω–∞—è —Ä–æ–ª—å (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è LLM) ===
    system_role = textwrap.dedent("""\
        –¢—ã ‚Äî ReasonerAgent –≤ ReAct-—Å–∏—Å—Ç–µ–º–µ.
        –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª–Ω—ã–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø–æ–¥–≤–æ–ø—Ä–æ—Å–∞.

        ### üîÅ –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª —à–∞–≥–∞ (—Ç–æ–ª—å–∫–æ —ç—Ç–∏ —ç—Ç–∞–ø—ã!)
        1. **validate_entities** ‚Äî –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—É—â–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–≤—Ç–æ—Ä ‚Üí "–ü—É—à–∫–∏–Ω") —á–µ—Ä–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.
        2. **fetch_data** ‚Äî –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, `list_books`).
        3. **process_data** ‚Äî –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞—Ç—å/—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å).
        4. **validate_result** ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ–¥–≤–æ–ø—Ä–æ—Å.
        5. **finalize** ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å —à–∞–≥ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π `validate_result`).

        –≠—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è **—Å—Ç—Ä–æ–≥–æ –ø–æ –ø–æ—Ä—è–¥–∫—É**. –ü—Ä–æ–ø—É—Å–∫ –≤–æ–∑–º–æ–∂–µ–Ω **—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–ø –Ω–µ –Ω—É–∂–µ–Ω**.

        ### üì§ –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û)
        –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π `null`, `true`/`false`, –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–∏–ø—ã.
        –í–µ—Ä–Ω–∏ **–¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON** –ø–æ —Å—Ö–µ–º–µ:
        ```json
        {{
          "next_stage": "analyze_question" | "validate_entities" | "fetch_data" | "process_data" | "validate_result" | "finalize" | "use_previous",
          "selected_tool": {{
            "agent": <–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞>,
            "operation": <–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏>,
            "params": {{<–ø–∞—Ä–∞–º–∞–µ—Ç—Ä>: <–∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞>,}}
          }} | null,
          "previous_output_ref": "id_—à–∞–≥–∞" | null,
          "run_entity_validation": true | false,
          "run_fetch_data": true | false,
          "run_process_data": true | false,
          "retry_count": 0,
          "validation_feedback": ["–æ—à–∏–±–∫–∞1", ...] | null,
          "reason": "–ö—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (–æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)"
        }}
	      ```

        ### üìã –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
        - **`next_stage`** (`string`):  
          –û–¥–∏–Ω –∏–∑: `validate_entities`, `fetch_data`, `process_data`, `validate_result`, `finalize`.  
          –í—ã–±–µ—Ä–∏ **—Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø**, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å.  
          - `validate_entities` ‚Äî –µ—Å–ª–∏ –ø–æ–¥–≤–æ–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—É—â–Ω–æ—Å—Ç–∏ (–∞–≤—Ç–æ—Ä, –∂–∞–Ω—Ä –∏ —Ç.–¥.), —Ç—Ä–µ–±—É—é—â–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏.  
          - `fetch_data` ‚Äî –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.  
          - `process_data` ‚Äî –µ—Å–ª–∏ —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–±—É—é—Ç –∞–≥—Ä–µ–≥–∞—Ü–∏–∏, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.  
          - `validate_result` ‚Äî **–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω** –ø–µ—Ä–µ–¥ `finalize`, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ–¥–≤–æ–ø—Ä–æ—Å.  
          - `finalize` ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é (`validation_passed == true`) –∏ —à–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.

        - **selected_tool** (`object | null`):  
          –û–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —ç—Ç–∞–ø–æ–≤ `validate_entities`, `fetch_data`, `process_data`.  
          –§–æ—Ä–º–∞—Ç:
            {
              "agent": "–ò–º—è–ê–≥–µ–Ω—Ç–∞",
              "operation": "–∏–º—è_–æ–ø–µ—Ä–∞—Ü–∏–∏",
              "params": { ... }
            }
          –î–ª—è `finalize` ‚Äî `null`.
                                  
        - **previous_output_ref** (`string | null`):  
          –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å `id` —à–∞–≥–∞ –∏–∑ `step_outputs`, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —ç—Ç–∞–ø—ã validate_entities –∏ fetch_data –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.
          –í–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö ‚Äî **`null`**.

        - **run_fetch_data** (`boolean`):  
          `true`, –µ—Å–ª–∏ previous_output_ref == null.
          –ï—Å–ª–∏ previous_output_ref <> null, —Ç–æ –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö previous_output_ref –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –Ω–µ—Ç, –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ —Å—Ç–∞–≤—å false 
                                  
        - **run_entity_validation** (`boolean`):  
          `true`, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π. 
          –ï—Å–ª–∏ run_fetch_data == true –∏ –Ω–∞ –Ω–µ–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–∏–ø–æ–º SEMANTIC, —Ç–æ `false`.
                                  
        - **run_process_data** (`boolean`):  
          `true`, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ (–æ–±—ã—á–Ω–æ –ø—Ä–∏ `process_data`).
          –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ fetch_data –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ–¥–≤–æ–ø—Ä–æ—Å, —Ç–æ false.

        - **retry_count** (`integer`):  
          –¢–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫. –£–≤–µ–ª–∏—á–∏–≤–∞–π –ø—Ä–∏ —Ä–µ—Ç—Ä–∞–µ.
        
        - **`validation_feedback`** (`array[string] | null`):  
          –°–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ –∏–ª–∏ –∑–∞–º–µ—á–∞–Ω–∏–π –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—ç—Ç–∞–ø `validate_result`).  
          - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è **—Ç–æ–ª—å–∫–æ** –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å.  
          - –î–æ–ª–∂–µ–Ω –±—ã—Ç—å `null`, –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∞—Å—å –∏–ª–∏ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.  
          - –ü—Ä–∏ —Ä–µ—Ç—Ä–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.

        - **reason** (`string`):  
          **–û–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ** —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –≤—ã–±–æ—Ä–∞. –ü—Ä–∏–º–µ—Ä:  
          *"–ü–æ–¥–≤–æ–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—É—â–Ω–æ—Å—Ç—å '–∞–≤—Ç–æ—Ä', —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è."*
                                  
        **‚ùó –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**  
          1. **–ù–ï –ü–û–í–¢–û–†–Ø–ô –£–°–ü–ï–®–ù–´–ï –≠–¢–ê–ü–´.** –ï—Å–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å `[ok]` –¥–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ `(next_stage, selected_tool)`, **—ç—Ç–æ—Ç —ç—Ç–∞–ø —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω** ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É.  
          2. **–ü–û–°–õ–ï –£–°–ü–ï–®–ù–û–ì–û `fetch_data` –í–°–ï–ì–î–ê –°–õ–ï–î–£–ï–¢ `validate_result`**, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ (`process_data`).  
          3. **`validate_result` –û–ë–Ø–ó–ê–¢–ï–õ–ï–ù –ø–µ—Ä–µ–¥ `finalize`.**  
          4. **`selected_tool` –ù–ï –ú–û–ñ–ï–¢ –±—ã—Ç—å `null`** –Ω–∞ —ç—Ç–∞–ø–∞—Ö `validate_entities`, `fetch_data`, `process_data`, `validate_result`.
          5. **–ï—Å–ª–∏ `validation_passed == true`, –≤—ã–±–∏—Ä–∞–π `next_stage = "finalize"` –∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π `validate_result`.**
    """)

    # === 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç ===
    # --- –ü–æ–¥–≤–æ–ø—Ä–æ—Å ---
    user_context = f"### ‚ùì –ü–æ–¥–≤–æ–ø—Ä–æ—Å\n{question}\n\n"

    # --- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥—Ä—É–≥–∏—Ö —à–∞–≥–æ–≤ ---
    if step_outputs:
        def _safe_json_dumps(obj, **kwargs):
            """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å fallback –Ω–∞ str()."""
            try:
                return json.dumps(obj, **kwargs)
            except (TypeError, ValueError):
                return str(obj)

        outputs_text = "\n".join(
            f"- {step_id}: {_safe_json_dumps(out, ensure_ascii=False, indent=2)}"
            for step_id, out in step_outputs.items()
        )
        user_context += f"### üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥—Ä—É–≥–∏—Ö —à–∞–≥–æ–≤\n{outputs_text}\n\n"
    else:
        user_context += "### üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥—Ä—É–≥–∏—Ö —à–∞–≥–æ–≤\n–ù–µ—Ç.\n\n"

        
    # --- –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã ---
    if tool_registry_snapshot:
        tools_text = json.dumps(tool_registry_snapshot, ensure_ascii=False, indent=2)
        user_context += f"### üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã\n{tools_text}\n\n"
    else:
        user_context += "### üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.\n\n"

    # --- –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ ---
    if step_state:
        safe_state = {
            k: v for k, v in step_state.items()
            if k in ("retry_count", "validation_feedback", "raw_output", "structured")
        }
        if "raw_output" in safe_state and safe_state["raw_output"] is not None:
            try:
                preview = json.dumps(safe_state["raw_output"], ensure_ascii=False, indent=2)
                if len(preview) > 500:
                    preview = preview[:497] + "..."
                safe_state["raw_output"] = preview
            except Exception:
                safe_state["raw_output"] = str(safe_state["raw_output"])[:500]
        state_text = json.dumps(safe_state, ensure_ascii=False, indent=2)
        user_context += f"### üß† –°–æ—Å—Ç–æ—è–Ω–∏–µ —à–∞–≥–∞\n{state_text}\n\n"
    else:
        user_context += "### üß† –°–æ—Å—Ç–æ—è–Ω–∏–µ —à–∞–≥–∞\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.\n\n"

    # --- –ò—Å—Ç–æ—Ä–∏—è –≤—ã–∑–æ–≤–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤ (agent_calls) ---
    agent_calls_text = "–ù–µ—Ç –≤—ã–∑–æ–≤–æ–≤."
    if step_state and step_state.get("agent_calls"):
        calls = step_state["agent_calls"]
        if calls:
            entries = []
            for i, call in enumerate(calls[-3:], 1):  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –≤—ã–∑–æ–≤–∞
                stage = call.get("stage", "?")
                agent = call.get("agent", "?")
                op = call.get("operation", "?")
                status = call.get("status", "?")
                summary = call.get("summary", "‚Äî")
                error = call.get("error", "")
                if error:
                    summary += f" [–û–®–ò–ë–ö–ê: {error}]"
                entries.append(f"{i}. [{status}] {stage} ‚Üí {agent}.{op}: {summary}")
            agent_calls_text = "\n".join(entries)
    user_context += f"### üìú –ò—Å—Ç–æ—Ä–∏—è –≤—ã–∑–æ–≤–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤ (–ù–ï –ü–û–í–¢–û–†–Ø–ô!)\n{agent_calls_text}\n\n"

    # === 3. –ü—Ä–∏–º–µ—Ä—ã ===
    examples = textwrap.dedent("""\
        ### ‚úÖ –ü—Ä–∏–º–µ—Ä—ã

        #### –ü—Ä–∏–º–µ—Ä 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∞
        ```json
        {
          "next_stage": "validate_entities",
          "selected_tool": {
            "agent": "BooksLibraryAgent",
            "operation": "validate_author",
            "params": {"candidates": ["–¢–æ–ª—Å—Ç–æ–π"]}
          },
          "previous_output_ref": null,
          "run_entity_validation": true,
          "run_fetch_data": true,
          "run_process_data": true,
          "retry_count": 0,
          "reason": "–ü–æ–¥–≤–æ–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—É—â–Ω–æ—Å—Ç—å '–∞–≤—Ç–æ—Ä', —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è."
        }
        ```

        #### –ü—Ä–∏–º–µ—Ä 2: –†–µ—Ç—Ä–∞–π –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
        ```json
        {
          "next_stage": "validate_entities",
          "selected_tool": {
            "agent": "BooksLibraryAgent",
            "operation": "validate_author",
            "params": {"candidates": ["–¢–æ–ª—Å—Ç–æ–π"]}
          },
          "previous_output_ref": null,
          "run_entity_validation": true,
          "run_fetch_data": true,
          "run_process_data": true,
          "retry_count": 1,
          "reason": "–ü—Ä–µ–¥—ã–¥—É—â–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —É—Ç–æ—á–Ω—è–µ–º –∏–º—è –∞–≤—Ç–æ—Ä–∞."
        }
        ```
       
        #### –ü—Ä–∏–º–µ—Ä 3: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ
        ```json
        {
          "next_stage": "process_data",
          ""selected_tool": {
            "agent": "DataAnalysisAgent",
            "operation": "analyze",
            "params": {}
          },
          "previous_output_ref": q1,
          "run_entity_validation": false,
          "run_fetch_data": false,
          "run_process_data": true,
          "retry_count": 0,
          "reason": "–î–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø–æ–¥–≤–æ–ø—Ä–æ—Å–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –ø—Ä–æ–≤–æ–¥–∏–º –∏—Ö –∞–Ω–∞–ª–∏–∑."
        }
        ```

        #### –ü—Ä–∏–º–µ—Ä 4: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —à–∞–≥–∞
        ```json
        {
          "next_stage": "finalize",
          "selected_tool": null,
          "previous_output_ref": null,
          "run_validation": false,
          "run_processing": false,
          "retry_count": 0,
          "reason": "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é, —à–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω."
        }
        ```
    """)

    # === –°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ ===
    full_prompt = f"{system_role.strip()}\n\n{user_context.strip()}\n\n{examples.strip()}"
    return full_prompt