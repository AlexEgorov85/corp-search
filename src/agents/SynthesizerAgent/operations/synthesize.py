# src/agents/SynthesizerAgent/operations/synthesize.py
"""
–û–ø–µ—Ä–∞—Ü–∏—è `synthesize` ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.

–¶–µ–ª—å: –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —à–∞–≥–æ–≤ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç.

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã (–∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ executor_node):
  - question (str): –∏—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  - plan (dict): —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–ª–∞–Ω–∞ (—Å–ø–∏—Å–æ–∫ –ø–æ–¥–≤–æ–ø—Ä–æ—Å–æ–≤)
  - step_outputs (dict): —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —à–∞–≥–æ–≤ {step_id: raw_output}

–õ–æ–≥–∏–∫–∞:
  1. –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM.
  2. –í—ã–∑—ã–≤–∞–µ—Ç LLM.
  3. –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π `AgentResult`.

–ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞ –æ—Ç executor_node:
>>> params = {
...     "question": "–ù–∞–π–¥–∏ –∫–Ω–∏–≥–∏ –ü—É—à–∫–∏–Ω–∞...",
...     "plan": {"subquestions": [...]},
...     "step_outputs": {"q1": [...], "q2": {...}}
... }
>>> result = op.run(params, context={}, agent=agent_instance)
>>> assert result.status == "ok"
>>> assert "final_answer" in result.output
"""

from __future__ import annotations
import json
import logging
from typing import Any, Dict, List, Optional
from src.agents.operations_base import BaseOperation, OperationKind
from src.model.agent_result import AgentResult

LOG = logging.getLogger(__name__)


class Operation(BaseOperation):
    """
    –û–ø–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ–∑–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.
    """

    # –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ ‚Äî –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤
    kind = OperationKind.DIRECT

    # –û–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    description = (
        "–ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ outputs —à–∞–≥–æ–≤ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç "
        "–∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (evidence)."
    )

    # –°—Ö–µ–º–∞ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    params_schema = {
        "question": {"type": "string", "required": True},
        "plan": {"type": "object", "required": True},
        "step_outputs": {"type": "object", "required": True},
    }

    # –°—Ö–µ–º–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    outputs_schema = {
        "type": "object",
        "properties": {
            "final_answer": "string",
            "evidence": "object"
        }
    }

    def _build_prompt(self, question: str, plan: Any, step_outputs: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM.

        Args:
            question (str): –∏—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å
            plan (Any): –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–æ–∂–∏–¥–∞–µ—Ç—Å—è Plan –∏–ª–∏ dict)
            step_outputs (dict): —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —à–∞–≥–æ–≤

        Returns:
            str: –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        """
        # üîë –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Plan –≤ dict
        if hasattr(plan, "model_dump"):
            plan_dict = plan.model_dump()
        elif hasattr(plan, "dict"):
            plan_dict = plan.dict()
        else:
            plan_dict = plan

        plan_text = json.dumps(plan_dict, ensure_ascii=False, indent=2)
        
        try:
            outputs_text = json.dumps(step_outputs, ensure_ascii=False, indent=2)
        except Exception:
            outputs_text = str(step_outputs)

        return f"""–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–∏–Ω—Ç–µ–∑—É –æ—Ç–≤–µ—Ç–æ–≤.
    –ù–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —à–∞–≥–æ–≤ —Å—Ñ–æ—Ä–º–∏—Ä—É–π **—Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç** –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    ### –ò—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    {question}

    ### –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    {plan_text}

    ### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —à–∞–≥–æ–≤
    {outputs_text}

    ### –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
    - –í–µ—Ä–Ω–∏ **–¢–û–õ–¨–ö–û** –≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    {{
        "final_answer": "—Å—Ç—Ä–æ–∫–∞ ‚Äî –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç",
        "evidence": {{}}  // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å—Å—ã–ª–∫–∏ –Ω–∞ —à–∞–≥–∏, —Ü–∏—Ç–∞—Ç—ã –∏ —Ç.–¥.
    }}
    - –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º, —Ç–æ—á–Ω—ã–º –∏ –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–º **—Ç–æ–ª—å–∫–æ** –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    - –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî –Ω–∞–ø–∏—à–∏ –æ–± —ç—Ç–æ–º –≤ final_answer.
    - –ù–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π –≤–Ω–µ JSON.
    """

    def _parse_llm_response(self, text: str) -> Dict[str, Any]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM."""
        text = text.strip()
        # –£–±–∏—Ä–∞–µ–º fenced block
        if text.startswith("```") and text.endswith("```"):
            text = text[3:-3].strip()
            if text.startswith("json"):
                text = text[4:].strip()

        try:
            return json.loads(text)
        except json.JSONDecodeError:
            # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π JSON-–æ–±—ä–µ–∫—Ç
            start = text.find("{")
            end = text.rfind("}")
            if start != -1 and end > start:
                try:
                    return json.loads(text[start:end + 1])
                except json.JSONDecodeError:
                    pass
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON: {text[:200]}...")

    def run(self, params: Dict[str, Any], context: Dict[str, Any], agent) -> AgentResult:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∏–Ω—Ç–µ–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.

        Args:
            params (dict):
                - question (str): –∏—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å
                - plan (dict): –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                - step_outputs (dict): —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —à–∞–≥–æ–≤
            context (dict): –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)
            agent: —ç–∫–∑–µ–º–ø–ª—è—Ä SynthesizerAgent (–¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ LLM)

        Returns:
            AgentResult: —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ç–µ–∑–∞
        """
        question = params["question"]
        plan = params["plan"]
        step_outputs = params["step_outputs"]

        if not agent.llm:
            return AgentResult.error("LLM –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ SynthesizerAgent")

        try:
            prompt = self._build_prompt(question, plan, step_outputs)
            LOG.debug("Synthesizer prompt:\n%s", prompt)

            raw_response = agent.llm.generate(prompt)
            LOG.debug("Synthesizer raw response:\n%s", raw_response)

            parsed = self._parse_llm_response(raw_response)

            final_answer = parsed.get("final_answer", "").strip()
            evidence = parsed.get("evidence", {})

            if not final_answer:
                final_answer = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç."

            output = {
                "final_answer": final_answer,
                "evidence": evidence
            }

            return AgentResult.ok(
                stage="synthesis",
                output=output,
                summary=f"–£—Å–ø–µ—à–Ω—ã–π —Å–∏–Ω—Ç–µ–∑ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: {question[:50]}..."
            )

        except Exception as e:
            LOG.exception("–û—à–∏–±–∫–∞ –≤ SynthesizerAgent.synthesize")
            return AgentResult.error(
                message=f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ –æ—Ç–≤–µ—Ç–∞: {e}",
                stage="synthesis"
            )