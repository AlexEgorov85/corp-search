# src/model/context/context.py
"""
–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞.
–°–æ–¥–µ—Ä–∂–∏—Ç –í–°–Æ –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –≤ –≤–∏–¥–µ —á–∏—Å—Ç—ã—Ö, —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤.
–í—Å–µ –º–µ—Ç–æ–¥—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –∞—É–¥–∏—Ç–∞.
"""

from __future__ import annotations
import json
import logging
from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field

from src.model.agent_result import AgentResult
from src.model.context.models import (
    ExecutionContext,
    Plan,
    StepExecutionState,
    SubQuestion,
)

LOG = logging.getLogger(__name__)


class GraphContext(BaseModel):
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞.
    –ò–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –≤—Å—é –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º.
    """

    # === –ü–æ–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ===
    question: str = ""
    plan: Plan = Field(default_factory=Plan)
    execution: ExecutionContext = Field(default_factory=ExecutionContext)
    memory: Dict[str, Any] = Field(default_factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å LangGraph."""
        return self.model_dump()

    @classmethod
    def from_state_dict(cls, state_dict: Dict[str, Any]) -> "GraphContext":
        """–°–æ–∑–¥–∞—ë—Ç GraphContext –∏–∑ —Å–ª–æ–≤–∞—Ä—è."""
        ctx = cls()
        if "question" in state_dict:
            ctx.question = state_dict["question"]
        if "plan" in state_dict:
            plan_data = state_dict["plan"]
            if isinstance(plan_data, dict):
                subquestions = [
                    SubQuestion(**sq) for sq in plan_data.get("subquestions", [])
                ]
                ctx.plan = Plan(subquestions=subquestions)
            else:
                ctx.plan = plan_data
        if "execution" in state_dict:
            exec_data = state_dict["execution"]
            steps = {}
            for step_id, step_data in exec_data.get("steps", {}).items():
                steps[step_id] = StepExecutionState(**step_data)
            ctx.execution = ExecutionContext(
                current_step_id=exec_data.get("current_step_id"),
                steps=steps,
                history=exec_data.get("history", []),
            )
        if "memory" in state_dict:
            ctx.memory = state_dict["memory"]
        return ctx

    # ======================================
    # 1. –†–∞–±–æ—Ç–∞ —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏ –ø–ª–∞–Ω–æ–º ========
    # ======================================

    def set_question(self, question: str) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å."""
        self.question = question
        LOG.info("üìù –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å: %s", question[:100])
        self.append_history_event({"type": "question_set", "question": question[:100]})

    def get_question(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å."""
        return self.question

    def set_plan(self, plan: Plan) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
        self.plan = plan
        LOG.info("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–ª–∞–Ω —Å %d –ø–æ–¥–≤–æ–ø—Ä–æ—Å–∞–º–∏", len(plan.subquestions))
        self.append_history_event({"type": "plan_set"})

    def get_plan(self) -> Plan:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
        return self.plan

    def is_plan_set(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –ø–ª–∞–Ω."""
        return len(self.plan.subquestions) > 0

    # ======================================
    # 2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–≥–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ======
    # ======================================

    def get_current_step_id(self) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —à–∞–≥–∞."""
        return self.execution.current_step_id

    def set_current_step_id(self, step_id: Optional[str]) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —à–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
        self.execution.current_step_id = step_id
        if step_id:
            LOG.info("‚û°Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—É—â–∏–π —à–∞–≥: %s", step_id)
            self.append_history_event({"type": "current_step_set", "step_id": step_id})

    def _get_subquestion_by_id(self, step_id: str) -> Optional[SubQuestion]:
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥: –Ω–∞–π—Ç–∏ –ø–æ–¥–≤–æ–ø—Ä–æ—Å –ø–æ ID –≤ –ø–ª–∞–Ω–µ."""
        for sq in self.plan.subquestions:
            if sq.id == step_id:
                return sq
        return None

    def get_subquestion_text(self, step_id: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥–≤–æ–ø—Ä–æ—Å–∞ –ø–æ –µ–≥–æ ID."""
        sq = self._get_subquestion_by_id(step_id)
        if sq:
            return sq.text
        step = self.get_execution_step(step_id)
        if step and step.text:
            return step.text
        return step_id

    def ensure_execution_step(self, step_id: str) -> StepExecutionState:
        """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è —à–∞–≥–∞."""
        if step_id not in self.execution.steps:
            sq = self._get_subquestion_by_id(step_id)
            text = sq.text if sq else step_id
            self.execution.steps[step_id] = StepExecutionState(id=step_id, text=text)
            LOG.debug("üÜï –°–æ–∑–¥–∞–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è —à–∞–≥–∞ %s", step_id)
        return self.execution.steps[step_id]

    def get_execution_step(self, step_id: str) -> Optional[StepExecutionState]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞."""
        return self.execution.steps.get(step_id)

    def is_step_completed(self, step_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à—ë–Ω –ª–∏ —à–∞–≥ (–≤—Å–µ —ç—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã)."""
        return self.is_step_fully_completed(step_id)

    def mark_step_completed(self, step_id: str) -> None:
        """–ü–æ–º–µ—á–∞–µ—Ç —à–∞–≥ –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π."""
        step = self.get_execution_step(step_id)
        if step:
            step.completed = True
            # LOG.info("üèÅ –®–∞–≥ %s –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π", step_id)
            self.append_history_event({"type": "step_completed", "step_id": step_id})

    def all_steps_completed(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à–µ–Ω—ã –ª–∏ –≤—Å–µ —à–∞–≥–∏ –≤ –ø–ª–∞–Ω–µ."""
        if not self.is_plan_set():
            return True
        for sq in self.plan.subquestions:
            step = self.get_execution_step(sq.id)
            # üîë –ï—Å–ª–∏ —à–∞–≥ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –ø—Ä–æ—à—ë–ª —á–µ—Ä–µ–∑ reasoner ‚Äî –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω
            if not step or not any(step.expected_stages.values()):
                return False
            if not self.is_step_fully_completed(sq.id):
                return False
        LOG.info("‚úÖ –í—Å–µ —à–∞–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
        return True

    def select_next_step(self) -> Optional[str]:
        """
        –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π —à–∞–≥, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —à–∞–≥–∞ –∏–ª–∏ None, –µ—Å–ª–∏ –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.
        """
        if not self.is_plan_set():
            LOG.warning("‚ö†Ô∏è –ü–ª–∞–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥")
            return None
        for sq in self.plan.subquestions:
            if self.is_step_fully_completed(sq.id):
                continue
            deps_ok = True
            for dep_id in sq.depends_on:
                if not self.is_step_fully_completed(dep_id):
                    deps_ok = False
                    break
            if deps_ok:
                LOG.debug("‚û°Ô∏è –ù–∞–π–¥–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥: %s", sq.id)
                return sq.id
        LOG.debug("üîç –ù–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —à–∞–≥–æ–≤ —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏")
        return None

    def start_step(self, step_id: str) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —à–∞–≥ –∫–∞–∫ —Ç–µ–∫—É—â–∏–π –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
        self.set_current_step_id(step_id)
        self.ensure_execution_step(step_id)
        LOG.info("üîÑ –ù–∞—á–∞—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞ %s: '%s'", step_id, self.get_subquestion_text(step_id))

    # ======================================
    # 3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–∞–º–∏ —à–∞–≥–∞ ===========
    # ======================================

    def set_expected_stages(self, step_id: str, stages: Dict[str, bool]) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç, –∫–∞–∫–∏–µ —ç—Ç–∞–ø—ã —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–ª—è —à–∞–≥–∞."""
        step = self.ensure_execution_step(step_id)
        step.expected_stages = stages
        LOG.debug("üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ–∂–∏–¥–∞–µ–º—ã–µ —ç—Ç–∞–ø—ã –¥–ª—è —à–∞–≥–∞ %s: %s", step_id, stages)

    def mark_stage_completed(self, step_id: str, stage: str) -> None:
        """–ü–æ–º–µ—á–∞–µ—Ç —ç—Ç–∞–ø –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π."""
        step = self.ensure_execution_step(step_id)
        if stage in step.completed_stages:
            step.completed_stages[stage] = True
            # LOG.info("‚úÖ –≠—Ç–∞–ø '%s' –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è —à–∞–≥–∞ %s", stage, step_id)

    def is_stage_completed(self, step_id: str, stage: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à—ë–Ω –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —ç—Ç–∞–ø."""
        step = self.get_execution_step(step_id)
        if not step:
            return False
        return step.completed_stages.get(stage, False)

    def is_step_fully_completed(self, step_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à–µ–Ω—ã –ª–∏ –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —ç—Ç–∞–ø—ã —à–∞–≥–∞."""
        step = self.get_execution_step(step_id)
        if not step:
            return False
        # üîë –ï—Å–ª–∏ expected_stages –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–≤—Å–µ False), —à–∞–≥ –ù–ï –∑–∞–≤–µ—Ä—à—ë–Ω!
        if not any(step.expected_stages.values()):
            return False
        for stage, required in step.expected_stages.items():
            if required and not step.completed_stages.get(stage, False):
                return False
        return True

    def get_current_stage(self, step_id: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: 'data_fetch', 'processing', 'validation' –∏–ª–∏ 'completed'.
        """
        if self.is_step_fully_completed(step_id):
            return "completed"
        step = self.get_execution_step(step_id)
        if not step:
            return "data_fetch"
        if not self.is_stage_completed(step_id, "data_fetch"):
            return "data_fetch"
        if step.expected_stages.get("processing", False) and not self.is_stage_completed(step_id, "processing"):
            return "processing"
        if step.expected_stages.get("validation", False) and not self.is_stage_completed(step_id, "validation"):
            return "validation"
        return "completed"

    # ===================================================
    # 4. –†–∞–±–æ—Ç–∞ —Å —Ä–µ—à–µ–Ω–∏—è–º–∏ Reasoner –∏ –≤—ã–∑–æ–≤–∞–º–∏ =========
    # ===================================================

    def record_reasoner_decision(self, step_id: str, decision: Dict[str, Any]) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ—à–µ–Ω–∏–µ Reasoner –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç expected_stages."""
        step = self.ensure_execution_step(step_id)
        step.decision = decision

        needs_postprocessing = decision.get("needs_postprocessing", False)
        needs_validation = decision.get("needs_validation", True)

        expected_stages = {
            "data_fetch": True,
            "processing": needs_postprocessing,
            "validation": needs_validation,
        }
        self.set_expected_stages(step_id, expected_stages)

        if "hypotheses" in decision and "final_decision" in decision:
            selected_idx = decision["final_decision"].get("selected_hypothesis", 0)
            hypotheses = decision["hypotheses"]
            if 0 <= selected_idx < len(hypotheses):
                step.hypothesis = hypotheses[selected_idx]
                hyp = hypotheses[selected_idx]
                # LOG.info("üß† –í—ã–±—Ä–∞–Ω–∞ –≥–∏–ø–æ—Ç–µ–∑–∞ –¥–ª—è —à–∞–≥–∞ %s: %s.%s (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: %.2f)",
                #          step_id, hyp["agent"], hyp["operation"], hyp["confidence"])

    def get_current_tool_call(self, step_id: str) -> Optional[Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞.
        """
        current_stage = self.get_current_stage(step_id)
        if current_stage == "completed":
            return None

        step = self.get_execution_step(step_id)
        if not step:
            return None

        if current_stage == "data_fetch":
            hyp = step.hypothesis
            if hyp:
                call = {
                    "agent": hyp["agent"],
                    "operation": hyp["operation"],
                    "params": hyp["params"],
                }
                LOG.debug("üõ†Ô∏è –¢–µ–∫—É—â–∏–π –≤—ã–∑–æ–≤ (data_fetch): %s.%s", call["agent"], call["operation"])
                return call
        elif current_stage == "processing":
            call = {
                "agent": "DataAnalysisAgent",
                "operation": "analyze",
                "params": {
                    "subquestion_text": self.get_subquestion_text(step_id),
                    "raw_output": step.raw_output,
                },
            }
            LOG.debug("üõ†Ô∏è –¢–µ–∫—É—â–∏–π –≤—ã–∑–æ–≤ (processing): DataAnalysisAgent.analyze")
            return call
        elif current_stage == "validation":
            call = {
                "agent": "ResultValidatorAgent",
                "operation": "validate_result",
                "params": {
                    "subquestion_text": self.get_subquestion_text(step_id),
                    "raw_output": step.raw_output,
                },
            }
            LOG.debug("üõ†Ô∏è –¢–µ–∫—É—â–∏–π –≤—ã–∑–æ–≤ (validation): ResultValidatorAgent.validate_result")
            return call
        return None
    
    def get_step_hypothesis(self, step_id: str) -> Optional[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥–∏–ø–æ—Ç–µ–∑–µ –¥–ª—è —à–∞–≥–∞."""
        step = self.get_execution_step(step_id)
        return step.hypothesis if step else None

    # ======================================
    # 5. –†–∞–±–æ—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ =============
    # ======================================

    def record_step_result(self, step_id: str, result: Any) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —à–∞–≥–∞."""
        step = self.ensure_execution_step(step_id)
        step.raw_output = result
        LOG.debug("üì¶ –ó–∞–ø–∏—Å–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —à–∞–≥–∞ %s", step_id)

    def record_validation_result(self, step_id: str, result: Any) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""
        step = self.ensure_execution_step(step_id)
        step.validation_result = result
        LOG.debug("üì¶ –ó–∞–ø–∏—Å–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —à–∞–≥–∞ %s", step_id)

    def get_step_result(self, step_id: str) -> Any:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞."""
        step = self.get_execution_step(step_id)
        return step.raw_output if step else None

    def get_all_completed_step_results(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —à–∞–≥–æ–≤."""
        results = {}
        for step_id, step in self.execution.steps.items():
            if self.is_step_fully_completed(step_id) and step.raw_output is not None:
                results[step_id] = step.raw_output
        return results
    
    def get_relevant_step_outputs_for_reasoner(self, step_id: str) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç raw_output —Ç–æ–ª—å–∫–æ –¥–ª—è —à–∞–≥–æ–≤ –∏–∑ depends_on —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–¥–≤–æ–ø—Ä–æ—Å–∞.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ reasoner_node –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞.
        """
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –ø–æ–¥–≤–æ–ø—Ä–æ—Å –≤ –ø–ª–∞–Ω–µ
        current_subq = None
        for sq in self.plan.subquestions:
            if sq.id == step_id:
                current_subq = sq
                break
        if not current_subq:
            return {}

        outputs = {}
        for dep_id in current_subq.depends_on:
            step = self.get_execution_step(dep_id)
            if step and step.raw_output is not None:
                outputs[dep_id] = step.raw_output

        return outputs
    
    def record_agent_call(self, step_id: str, agent_result: AgentResult) -> None:
        """
        –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—ã–∑–æ–≤ –∞–≥–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é —à–∞–≥–∞.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ BaseAgent.execute_operation –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏.
        
        Args:
            step_id (str): ID —à–∞–≥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            agent_result (AgentResult): —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        if not step_id or not agent_result:
            return

        step = self.ensure_execution_step(step_id)
        if not step:
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º AgentResult –≤ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Å–ª–æ–≤–∞—Ä—å
        call_record = {
            "agent": agent_result.agent or "unknown",
            "operation": agent_result.operation or "unknown",
            "status": agent_result.status,
            "stage": agent_result.stage,
            "input_params": agent_result.input_params,
            "output": agent_result.output,
            "summary": agent_result.summary,
            "error": agent_result.error,
            "metadata": agent_result.metadata,
            "timestamp": agent_result.ts,
        }

        step.agent_calls.append(call_record)
        LOG.debug(
            "üìù –ó–∞–ø–∏—Å–∞–Ω –≤—ã–∑–æ–≤ –∞–≥–µ–Ω—Ç–∞ %s.%s –¥–ª—è —à–∞–≥–∞ %s (—Å—Ç–∞—Ç—É—Å: %s)",
            call_record["agent"],
            call_record["operation"],
            step_id,
            call_record["status"]
        )

    # ======================================
    # 6. –†–∞–±–æ—Ç–∞ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º ========
    # ======================================

    def set_final_answer(self, answer: str) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç."""
        self.memory["final_answer"] = answer
        LOG.info("üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: %.200s", answer)
        self.append_history_event({"type": "final_answer_set"})

    def get_final_answer(self) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç."""
        return self.memory.get("final_answer")

    # ======================================
    # 7. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ============
    # ======================================

    def append_history_event(self, event: Dict[str, Any]) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
        event_with_ts = event.copy()
        event_with_ts["timestamp"] = datetime.utcnow().isoformat()
        self.execution.history.append(event_with_ts)

    # ====
    def get_step_state_for_validation(self, step_id: str) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —à–∞–≥–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ get_current_tool_call –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ ResultValidatorAgent.
        """
        step = self.get_execution_step(step_id)
        if not step:
            return {}
        return {
            "retry_count": step.retry_count,
            "error": step.error,
            "completed_stages": step.completed_stages,
            "expected_stages": step.expected_stages,
        }